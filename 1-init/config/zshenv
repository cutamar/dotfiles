# docker aliases and helpers
alias docker-nuke='docker rm -f $(docker ps -q -a); docker rmi -f $(docker images -q); docker volume rm -f $(docker volume ls -q); docker network rm $(docker network ls -q)'
docker-sh() {
	docker exec -it "$1" sh
}
alias dp='docker ps'
alias di='docker image'
alias dv='docker volume'
alias dn='docker network'

# common tools
alias clip='xclip -sel clip'

# common shortcuts
mkcd() {
    mkdir -p "$1"
    builtin cd "$1"
}
alias cb="git branch | grep -E '^\* ' | sed 's/^\* //g'"
alias gs='git status'
alias gg='git pull origin $(cb)'
alias gp='git push origin $(cb)'

# common mistyping
alias gti=git
alias dokcer=docker
alias sl=ls
alias cd..='cd ..'

# python virtualenv wrapper
venv_wrapper_script="/usr/bin/virtualenvwrapper.sh"
if [ -f "$venv_wrapper_script" ]
then
    export WORKON_HOME=~/.virtualenvs
    mkdir -p "$WORKON_HOME"
    source "$venv_wrapper_script"
fi

# make c (=cd) perform ls, with truncation for long output
if hash gls >/dev/null 2>&1; then
    # gls maps to gnu coreutil's ls on OS X
    _GLS_COMMAND=gls
else
    _GLS_COMMAND=ls
fi
c() { builtin cd "$@" && _truncated_ls }
# a pretty ls truncated to at most N lines; helper function for cd, popd, pushd
_truncated_ls() {
    local LS_LINES=8 # use no more than N lines for ls output
    local RESERVED_LINES=5 # reserve N lines of the term, for short windows
    # eg. if a window is only 8 lines high, we want to avoid filling up the
    # whole screen, so instead only 3 lines would be consumed.

    # if using all N lines makes us go over the reserved number of lines
    if [[ $(($LINES - $RESERVED_LINES)) -lt $LS_LINES ]]; then
        local LS_LINES=$(($LINES - $RESERVED_LINES))
    fi

    # compute and store the result of ls
    local RAW_LS_OUT="$(command $_GLS_COMMAND --group-directories-first \
                                              --format=across \
                                              --color=always \
                                              --width=$COLUMNS)"
    local RAW_LS_LINES="$(command wc -l <<< "$RAW_LS_OUT")"

    if [[ $RAW_LS_LINES -gt $LS_LINES ]]; then
        command head -n $(($LS_LINES - 1)) <<< "$RAW_LS_OUT"
        _right_align "... $(($RAW_LS_LINES - $LS_LINES + 1)) lines hidden"
    else
        builtin echo -E "$RAW_LS_OUT"
    fi
}
# right align text and echo it; helper function for _truncated_ls
_right_align() {
    local PADDING=$(($COLUMNS - ${#1}))
    [[ $PADDING -gt 0 ]] && builtin printf "%${PADDING}s"
    builtin echo "$1"
}

# weather
alias weather='curl wttr.in/zurich'

# android studio
export ANDROID_SDK=/home/amar/Android/Sdk

# gpg agent
export SSH_AGENT_PID=
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh"

# setup tools
export SETUPTOOLS_USE_DISTUTILS="stdlib"
